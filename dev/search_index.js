var documenterSearchIndex = {"docs":
[{"location":"#Underscore.jl-1","page":"Home","title":"Underscore.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Underscore provides a single macro @_ to make it easier to pass closures to higher order functions. This is done by translating \"placeholder expressions\" containing placeholders _ or _1,_2,... . The key benefits of _ placeholders are","category":"page"},{"location":"#","page":"Home","title":"Home","text":"They avoid the need to come up with argument names (for example, the x in x->x+1 may not be meaningful).\nBrevity. For example _+1.","category":"page"},{"location":"#API-and-Examples-1","page":"Home","title":"API and Examples","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"@_","category":"page"},{"location":"#Underscore.@_","page":"Home","title":"Underscore.@_","text":"@_ func(ex1, [ex2 ...])\n\nConvert ex1,ex2,... into anonymous functions when they have _ placeholders, and pass them along to func.\n\nWhen multiple _ are present in a single sub-expression they become successive arguments to a single anonymous function. That is, @_ map(_+2^_, A) is equivalent to @_ map((x,y)->x+2^y, A).\n\nNumbered placeholders _1,_2,... may be used if you need to reorder,repeat or omit arguments. For example @_ map(_2+_1, A, B) is equivalent to map((x,y)->(y,x), A, B).\n\nPiping and composition chains are treated as a special case where the replacement recurses into sub-expressions. That is, the following two are equivalent:\n\n@_ f1(ex1)  |>     f2(ex1)\n@_(f1(ex1)) |>  @_(f2(ex1))\n\nExamples\n\n@_ can be very convenient for simple mapping operations in cases where broadcasting syntax is awkward. For example, to get the second last element of each array in a collection:\n\njulia> @_ map(_[end-1],  [[1,2,3], [4,5]])\n2-element Array{Int64,1}:\n 2\n 4\n\nIf you need to repeat an argument more than once the numbered form can be useful:\n\njulia> @_ map(_1^_1,  [1,2,3])\n3-element Array{Int64,1}:\n  1\n  4\n 27\n\nFor manipulating tabular data @_ provides convenient syntax:\n\njulia> data = [(x=\"a\", y=1),\n               (x=\"b\", y=2),\n               (x=\"c\", y=3)];\n\njulia> @_ filter(!startswith(_.x, \"a\"), data)\n2-element Array{NamedTuple{(:x, :y),Tuple{String,Int64}},1}:\n (x = \"b\", y = 2)\n (x = \"c\", y = 3)\n\nCombined with a lazy Map and Filter it gives super simple but convenient manipulation of tabular data:\n\njulia> Filter(f) = x->filter(f,x);   Map(f) = x->map(f,x);\n\njulia> @_ data |>\n          Filter(!startswith(_.x, \"a\")) |>\n          Map(_.y)\n2-element Array{Int64,1}:\n 2\n 3\n\n\n\n\n\n","category":"macro"},{"location":"#Design-1","page":"Home","title":"Design","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"We observe that anonymous functions are generally passed directly to another \"outer\" function. For example, in map(x->x*y, A) the outer function is map. Therefore one can place the @_ outside the map which leads to less visual clutter and improved clarity. This is particularly relevant because use of a macro in a function argument list tends to need additional parenentheses. Compare to the obvious alternatives:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"    @_ map(_+1, A)\n    map(@_(_+1), A)\n    map(x->x+1, A)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"With this \"outermost-but-one\" placement in mind, one can generalize to pipelines where anonymous functions are generally used as arguments to filter and map. This works in a particularly nice way for lazy versions of Filter and Map, allowing expressions such as","category":"page"},{"location":"#","page":"Home","title":"Home","text":"    @_  data         |>\n        Filter(_>10) |>\n        Map(_+1)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Somewhat of a design conundrum is how to make this work more natively with non-lazy filter and map. It might make sense to support double underscores to \"escape an extra level\", allowing things such as","category":"page"},{"location":"#","page":"Home","title":"Home","text":"    @_  data             |>\n        filter(_>10, __) |>\n        map(_+1, __)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"to mean what is desired.","category":"page"}]
}
